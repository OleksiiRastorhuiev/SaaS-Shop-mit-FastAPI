'''
export PYTHONPATH=$PYTHONPATH:../
pytest tests/test_encryption.py
'''

import pytest
from cryptography.fernet import InvalidToken
from encryption import Encryption

# ‚úÖ Test: Verschl√ºsselung und Entschl√ºsselung funktionieren korrekt
def test_encrypt_decrypt():
    """
    Testet, ob ein String korrekt verschl√ºsselt und wieder entschl√ºsselt werden kann.
    """
    enc = Encryption()
    original = "Geheime Nachricht 123! ü§´"
    encrypted = enc.encrypt(original)
    decrypted = enc.decrypt(encrypted)

    assert isinstance(encrypted, bytes)
    assert isinstance(decrypted, str)
    assert decrypted == original

# ‚úÖ Test: Fehler bei ung√ºltigem Entschl√ºsselungs-Token
def test_decrypt_invalid_token():
    """
    Testet, ob eine Exception ausgel√∂st wird, wenn ein ung√ºltiger Token entschl√ºsselt werden soll.
    """
    enc = Encryption()
    invalid_data = b"invalidtoken"

    with pytest.raises(InvalidToken):
        enc.decrypt(invalid_data)

# ‚úÖ Test: Mehrfachverschl√ºsselung desselben Textes ergibt unterschiedliche Ciphertexte
def test_encrypt_returns_different_ciphertexts_for_same_input():
    """
    Testet, ob dieselbe Eingabe bei wiederholter Verschl√ºsselung unterschiedliche Ausgaben erzeugt.
    Dies zeigt, dass ein zuf√§lliger Initialisierungsvektor verwendet wird.
    """
    enc = Encryption()
    input_text = "immer gleich"
    enc1 = enc.encrypt(input_text)
    enc2 = enc.encrypt(input_text)

    # Obwohl beide entschl√ºsselten Inhalte gleich sind,
    # sollten die verschl√ºsselten Bytes unterschiedlich sein
    assert enc1 != enc2
    assert enc.decrypt(enc1) == input_text
    assert enc.decrypt(enc2) == input_text
